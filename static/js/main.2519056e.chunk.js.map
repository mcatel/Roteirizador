{"version":3,"sources":["assets/images/travolta-crunched.gif","services/api.js","services/saveRoute.js","utils/calculateAndDisplayRoute.js","components/Autocomplete/index.jsx","components/Form/index.jsx","components/GoogleMapComponent/index.jsx","pages/Router/index.jsx","pages/NotFoundPage/index.jsx","routes/index.jsx","App.jsx","index.jsx"],"names":["module","exports","api","axios","create","baseURL","process","saveRoute","coordinates","a","length","post","map","coordinate","longitude","lat","latitude","lng","console","log","calculateAndDisplayRoute","setRouteData","directionsService","window","google","maps","DirectionsService","directionsDisplay","DirectionsRenderer","setMap","waypoints","coord","location","stopover","origin","shift","destination","pop","route","travelMode","response","status","setDirections","distancia","routes","legs","reduce","soma","dist","distance","value","tempo","t","duration","toFixed","time","Autocomplete","props","setCoordinates","label","name","index","handleSelect","geocodeByAddress","description","geocode","getLatLng","latLng","slice","className","htmlFor","minLengthAutocomplete","selectProps","placeholder","onChange","styles","input","provided","height","control","backgroundColor","borderRadius","singleValue","transform","Form","gmapsLoaded","useState","fields","setFields","onSubmit","e","preventDefault","id","field","key","type","onClick","array","filter","_","elementIndex","coordIndex","removeField","mapContainerStyle","position","width","border","GoogleMapComponent","center","zoom","onLoad","RouterContainer","setCenter","googleMap","setGoogleMap","routeData","useEffect","navigator","geolocation","getCurrentPosition","coords","timeout","NotFoundPage","to","src","PageNotFound","alt","Routes","path","exact","Router","component","App","setGmapsLoaded","initMap","gmapScriptEl","document","createElement","querySelector","insertAdjacentElement","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2519056e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/travolta-crunched.2ea66c06.gif\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL_PROD || process.env.REACT_APP_BACKEND_URL_LOCAL,\n});\n\nexport default api;\n","import api from './api';\n\nconst saveRoute = async (coordinates) => {\n  try {\n    if (coordinates && coordinates.length > 0) {\n      await api.post('routes', {\n        coordinates: coordinates.map((coordinate) => ({\n          longitude: coordinate.lat,\n          latitude: coordinate.lng,\n        })),\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default saveRoute;\n","const calculateAndDisplayRoute = (map, coordinates, setRouteData) => {\n  const directionsService = new window.google.maps.DirectionsService();\n  const directionsDisplay = new window.google.maps.DirectionsRenderer();\n  directionsDisplay.setMap(map);\n\n  if (coordinates.length <= 1) {\n    return;\n  }\n\n  const waypoints = coordinates.map((coord) => ({\n    location: coord,\n    stopover: true,\n  }));\n\n  const origin = waypoints.shift().location;\n  const destination = waypoints.pop().location;\n\n  directionsService.route({\n    origin,\n    destination,\n    waypoints,\n    travelMode: 'DRIVING',\n  }, (response, status) => {\n    if (status === 'OK') {\n      directionsDisplay.setDirections(response);\n\n      const distancia = response.routes[0].legs.reduce(\n        (soma, dist) => soma + dist.distance.value,\n        0,\n      );\n\n      const tempo = response.routes[0].legs.reduce(\n        (soma, t) => soma + t.duration.value,\n        0,\n      );\n\n      setRouteData({\n        distance: (distancia / 1000).toFixed(2),\n        time: (tempo / 3600).toFixed(2),\n      });\n    } else {\n      setRouteData({\n        distance: null,\n        time: null,\n      });\n    }\n  });\n};\n\nexport default calculateAndDisplayRoute;\n","import React from 'react';\nimport GooglePlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-google-places-autocomplete';\nimport './styles.css';\n\nfunction Autocomplete(props) {\n  const {\n    coordinates, setCoordinates, label, name, index,\n  } = props;\n\n  const handleSelect = async ({ value }) => {\n    const geocode = await geocodeByAddress(value.description);\n    const latLng = await getLatLng(geocode[0]);\n\n    setCoordinates([\n      ...coordinates.slice(0, index),\n      latLng,\n      ...coordinates.slice(index + 1, coordinates.length),\n    ]);\n  };\n\n  return (\n    <div className=\"input-block\">\n      <label htmlFor={name}>{label}</label>\n\n      <GooglePlacesAutocomplete\n        minLengthAutocomplete={3}\n        selectProps={{\n          placeholder: 'Informe uma parada',\n          onChange: handleSelect,\n          styles: {\n            input: (provided) => ({\n              ...provided,\n              height: '30px',\n            }),\n            control: (provided) => ({\n              ...provided,\n              backgroundColor: '#E6E6F0',\n              borderRadius: '8px',\n            }),\n            singleValue: (provided) => ({\n              ...provided,\n              '-webkit-transform': null,\n              transform: null,\n            }),\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Autocomplete;\n","import React, { useState } from 'react';\nimport {\n  FaPlus, FaRoad, FaTrash,\n} from 'react-icons/fa';\nimport saveRoute from '../../services/saveRoute';\nimport calculateAndDisplayRoute from '../../utils/calculateAndDisplayRoute';\nimport Autocomplete from '../Autocomplete';\nimport './styles.css';\n\nfunction Form(props) {\n  const {\n    coordinates,\n    setCoordinates,\n    setRouteData,\n    map,\n    gmapsLoaded,\n  } = props;\n\n  const [fields, setFields] = useState([\n    { name: 'origem', label: 'Origem' },\n    { name: 'parada', label: 'Parada' },\n  ]);\n\n  function addNewField(name, label) {\n    setFields([...fields, { name, label }]);\n  }\n\n  function removeField(index) {\n    const array = fields.filter((_, elementIndex) => elementIndex !== index);\n    setCoordinates(coordinates.filter((_, coordIndex) => index !== coordIndex));\n    setFields(array);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (coordinates && coordinates.length > 1) {\n      saveRoute(coordinates);\n      calculateAndDisplayRoute(map, coordinates, setRouteData);\n    } else {\n      setCoordinates([]);\n      calculateAndDisplayRoute(map, [], setRouteData);\n    }\n  }\n\n  if (!gmapsLoaded) {\n    return <p>Mapa não carregado</p>;\n  }\n\n  return (\n    <form onSubmit={handleSubmit} id=\"form-container\">\n      <legend>Rotas</legend>\n\n      {fields.map((field, index) => (\n        <div key={`${field.name + index}`} className=\"field-block\">\n          <Autocomplete\n            label={field.label}\n            index={index}\n            name={field.name + index}\n            coordinates={coordinates}\n            setCoordinates={setCoordinates}\n          />\n\n          {(index > 1) && (\n            <button type=\"button\" onClick={() => removeField(index)}>\n              <FaTrash />\n            </button>\n          )}\n        </div>\n      ))}\n\n      <section>\n        <button type=\"submit\" className=\"button-router\">\n          <FaRoad className=\"button-icon\" />\n          Roteirizar\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button-add\"\n          onClick={() => addNewField('parada', 'Parada')}\n        >\n          <FaPlus />\n        </button>\n\n      </section>\n    </form>\n  );\n}\n\nexport default Form;\n","import {\n  GoogleMap,\n} from '@react-google-maps/api';\nimport React from 'react';\n\nconst mapContainerStyle = {\n  position: 'relative',\n  width: '100%',\n  height: '100%',\n  borderRadius: '0.8rem',\n  border: '1px solid var(--color-primary)',\n};\n\nconst GoogleMapComponent = (props) => {\n  const {\n    setMap,\n    center,\n    gmapsLoaded,\n  } = props;\n\n  const onMapLoaded = (map) => {\n    setMap(map);\n  };\n\n  if (!gmapsLoaded) {\n    return <p>Mapa não carregado</p>;\n  }\n\n  return (\n    <GoogleMap\n      mapContainerStyle={mapContainerStyle}\n      zoom={8}\n      center={center}\n      onLoad={onMapLoaded}\n    />\n  );\n};\n\nexport default GoogleMapComponent;\n","import React, { useEffect, useState } from 'react';\nimport Form from '../../components/Form';\nimport GoogleMapComponent from '../../components/GoogleMapComponent';\nimport './styles.css';\n\nconst RouterContainer = ({ gmapsLoaded }) => {\n  const [center, setCenter] = useState({ lat: -14.94478488, lng: -50.00976563 });\n  const [googleMap, setGoogleMap] = useState(null);\n  const [coordinates, setCoordinates] = useState([]);\n  const [routeData, setRouteData] = useState({});\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      setCenter({ lat: latitude, lng: longitude });\n    }, () => {\n      setCenter({ lat: -14.94478488, lng: -50.00976563 });\n    }, {\n      timeout: 30000,\n    });\n  }, []);\n\n  return (\n    <div id=\"router-container\">\n      <header>\n        <Form\n          coordinates={coordinates}\n          setCoordinates={setCoordinates}\n          routeData={routeData}\n          map={googleMap}\n          setRouteData={setRouteData}\n          center={center}\n          gmapsLoaded={gmapsLoaded}\n        />\n\n        {(routeData.distance || routeData.time) && (\n          <footer>\n            {routeData.distance && (\n              <p>\n                Distância:\n                {' '}\n                {routeData.distance}\n                {' '}\n                Km\n              </p>\n            )}\n            {routeData.time && (\n              <p>\n                Tempo estimado:\n                {' '}\n                {routeData.time}\n                {' '}\n                Horas\n              </p>\n            )}\n          </footer>\n        )}\n      </header>\n\n      <main>\n        <GoogleMapComponent\n          center={center}\n          setMap={setGoogleMap}\n          gmapsLoaded={gmapsLoaded}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default RouterContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport PageNotFound from '../../assets/images/travolta-crunched.gif';\n\nimport './styles.css';\n\nfunction NotFoundPage() {\n  return (\n    <div id=\"not-found-container\">\n\n      <main>\n        <strong> 404 </strong>\n        <p> Página não encontrada </p>\n\n        <Link className=\"back\" to=\"/\">\n          <FaArrowLeft className=\"back-icon\" />\n          Voltar\n        </Link>\n\n      </main>\n\n      <footer>\n        <img src={PageNotFound} alt=\"Página não encontrada\" />\n      </footer>\n    </div>\n  );\n}\n\nexport default NotFoundPage;\n","import React from 'react';\nimport {\n  BrowserRouter, Route, Switch,\n} from 'react-router-dom';\nimport Router from '../pages/Router';\nimport NotFoundPage from '../pages/NotFoundPage';\n\nconst Routes = ({ gmapsLoaded }) => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" exact>\n        <Router\n          gmapsLoaded={gmapsLoaded}\n        />\n      </Route>\n      <Route component={NotFoundPage} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","import React, { useEffect, useState } from 'react';\nimport './assets/styles/App.css';\nimport Routes from './routes';\n\nconst App = () => {\n  const [gmapsLoaded, setGmapsLoaded] = useState(false);\n\n  const initMap = () => {\n    setGmapsLoaded(true);\n  };\n\n  useEffect(() => {\n    window.initMap = initMap;\n    const gmapScriptEl = document.createElement('script');\n    gmapScriptEl.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&callback=initMap`;\n    document.querySelector('body').insertAdjacentElement('beforeend', gmapScriptEl);\n  }, []);\n\n  return (\n    <Routes\n      gmapsLoaded={gmapsLoaded}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}